openapi: 3.0.0
info:
  title: DevIt backend
  description: CRUD app to manage fetched RSS feeds
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
    description: Backend URL
components:
  securitySchemas:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  bearerAuth: []
paths:
  /users:
    get:
      summary: Returns a list of users.
      description: List of all registered users.
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    email:
                      type: string
                    password:
                      type: string
                    isActivated:
                      type: boolean
                    activationLink:
                      type: string
  /register:
    post:
      summary: Registers new user

      requestBody:
        description: Register new user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string

      responses:
        '200':
          description: User reg success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                      id:
                        type: string
                      isActivated:
                        type: boolean
        '409':
          description: User reg failure.
          content:
            text/plain:
              schema:
                type: string
                example: 'Error: User already exists.'
  /login:
    post:
      summary: Logs user in
      responses:
        '200':
          description: User login success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                      id:
                        type: string
                      isActivated:
                        type: boolean
        '409':
          description: User login failure.
          content:
            text/plain:
              schema:
                type: string
                example: 'Error: User not found.'
  /logout:
    post:
      summary: Logs user out
      responses:
        '200':
          description: User logout success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledged:
                    type: boolean
                  deletedCount:
                    type: number
  /refresh:
    get:
      summary: Refreshes user token.
      responses:
        '200':
          description: Refresh successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                      id:
                        type: string
                      isActivated:
                        type: boolean
        '422':
          description: Token refresh failure.
          content:
            text/plain:
              schema:
                type: string
                example: 'Error: Invalid refresh token.'
  /rss/items:
    get:
      summary: Get all items.

      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of items on one page
        - in: query
          name: page
          schema:
            type: integer
          description: Page to fetch
        - in: query
          name: value
          schema:
            type: string
          description: Search value
        - in: query
          name: order
          schema:
            type: number
          description: Order of items

      responses:
        '200':
          description: Returns paginated list of posts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  docs:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        title:
                          type: string
                        link:
                          type: string
                        pubDate: 
                          type: string
                        __v: 
                          type: number
                  page:
                    type: number
                  pagea:
                    type: number
                  limit:
                    type: number
                  total:
                    type: number

    post:
      summary: Create new item.

      requestBody:
        description: New item request.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                link:
                  type: string
                pubDate:
                  type: string

      responses:
        '200':
          description: Created item from db.
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  link:
                    type: string
                  pubDate:
                    type: string

    put:
      summary: Update item  in DB.
      responses:
        '200':
          description: Item updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string
                  link:
                    type: string
                  pubDate: 
                    type: string

    delete:
      summary: Delete item in DB.
      responses:
        '200':
          description: Item updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string
                  link:
                    type: string
                  pubDate: 
                    type: string
        '404':
          description: Item not found.
          content:
            text/plain:
              schema:
                type: string
                example: 'Error: Item not found.'

  /rss-items/{itemId}:
    get:
      summary: Get item by ID.
      responses:
        '200':
          description: Item found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  title:
                    type: string
                  link:
                    type: string
                  pubDate: 
                    type: string
                  __v: 
                    type: number
        '404':
          description: Item not found.
          content:
            text/plain:
              schema:
                type: string
                example: 'Error: Item not found.'
